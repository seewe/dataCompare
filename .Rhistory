email = 'info@dataforknow.com',
role = c("aut", "cre") ),
repo_url = "https://github.com/seewe/dataCompare",
)
golem::fill_desc(
pkg_name = "dataCompare",
pkg_title = "A 'shiny' App To Compare Two Data Frames",
pkg_description = "The 'dataCompare' package is a 'shiny' application developed with the 'Golem' framework.
It provides a graphical tool for checking value differences between two data frames.
The user provides two data frames for comparison, selects IDs variables identifying each row of input data,
then clicks a button to perform the comparison. Several 'R' package functions are used to describe the data
and perform the comparison in the server of the application. The main ones are 'comparedf()' from 'arsenal'
and 'skim()' from 'skimr'.
See the description of 'comparedf()' from the 'arsenal' package and that of 'skim()' from the 'skimr' package.",
pkg_version = '1.0.0',
authors = person(given = 'Sergio',
family = 'Ewane Ebouele',
email = 'info@dataforknow.com',
role = c("aut", "cre") ),
repo_url = "https://github.com/seewe/dataCompare",
)
devtools::install_github("JohnCoene/bsutils")
bsutils::gallery()
golem::fill_desc(
pkg_name = "dataCompare",
pkg_title = "A 'shiny' App to Compare Two Data Frames",
pkg_description = "The 'dataCompare' package is a 'shiny' application developed with the 'Golem' framework.
It provides a graphical tool for checking value differences between two data frames.
The user provides two data frames for comparison, selects IDs variables identifying each row of input data,
then clicks a button to perform the comparison. Several 'R' package functions are used to describe the data
and perform the comparison in the server of the application. The main ones are 'comparedf()' from 'arsenal'
and 'skim()' from 'skimr'.
See the description of 'comparedf()' from the 'arsenal' package and that of 'skim()' from the 'skimr' package.",
pkg_version = '1.0.0',
authors = person(given = 'Sergio',
family = 'Ewane Ebouele',
email = 'info@dataforknow.com',
role = c("aut", "cre") ),
repo_url = "https://github.com/seewe/dataCompare",
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
pkgload::dev_help('dataCompare-package')
run_data_compare_app()
detach("package:dataCompare", unload = TRUE)
library(dataCompare)
devtools::build_rmd("vignettes/dataCompare.Rmd")
devtools::build_rmd("vignettes/dataCompare.Rmd")
library(dataCompare)
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
library(dataCompare)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
usethis::use_import_from("bslib", c("popover"))
usethis::use_import_from("bsicons", c("bsicon"))
usethis::use_import_from("bsicons", c("bs_icon"))
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
usethis::use_import_from("bslib", c("popover", "tooltip"))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
library(shiny)
library(shinyBS)
install.packages("shinyBS")
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
bsTooltip("bins", "The wait times will be broken into this many equally spaced bins",
"right", options = list(container = "body"))
),
mainPanel(
plotOutput("distPlot")
)
)
),
server =
function(input, output, session) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
addPopover(session, "distPlot", "Data", content = paste0("
Waiting time between ",
"eruptions and the duration of the eruption for the Old Faithful geyser ",
"in Yellowstone National Park, Wyoming, USA.
Azzalini, A. and ",
"Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. ",
"Applied Statistics 39, 357-365.
"), trigger = 'click')
}
)
usethis::use_import_from("shinyBS", c("bsPopover", "addPopover"))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
usethis::use_import_from("vroom", c("spec"))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
devtools::load_all(".")
2+2
golem::fill_desc(
pkg_name = "dataCompare",
pkg_title = "A 'shiny' App to Compare Two Data Frames",
pkg_description = "A tool developed with the 'Golem' framework which provides
an easier way to check cells differences between two data
frames. The user provides two data frames for comparison,
selects IDs variables identifying each row of input data,
then clicks a button to perform the comparison. Several
'R' package functions are used to describe the data
and perform the comparison in the server of the
application. The main ones are comparedf() from 'arsenal'
and skim() from 'skimr'. For more details see the
description of comparedf() from the 'arsenal' package and
that of skim() from the 'skimr' package.",
pkg_version = '1.0.0',
authors = person(given = 'Sergio',
family = 'Ewane Ebouele',
email = 'info@dataforknow.com',
role = c("aut", "cre") ),
repo_url = "https://github.com/seewe/dataCompare",
)
build_vignettes()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
rmarkdown::render("../inst/app/www/Comparison_report.Rmd", params = list(
df1_input = iris %>% mutate(ID = row_number()),
df2_input = iris %>% mutate(ID = row_number()),
id_input = "Species",
title_input = "test",
author_input = "Sergio"
context_input = "Sergio"
rmarkdown::render("../inst/app/www/Comparison_report.Rmd", params = list(
df1_input = iris %>% mutate(ID = row_number()),
df2_input = iris %>% mutate(ID = row_number()),
id_input = "Species",
title_input = "test",
author_input = "Sergio",
context_input = "Sergio"
))
rmarkdown::render("R:/data4know/dataCompare/inst/app/www/Comparison_report.Rmd", params = list(
df1_input = iris %>% mutate(ID = row_number()),
df2_input = iris %>% mutate(ID = row_number()),
id_input = "Species",
title_input = "test",
author_input = "Sergio",
context_input = "Sergio"
))
install.packages("lorem")
lorem::ipsum()
rmarkdown::render("R:/data4know/dataCompare/inst/app/www/Comparison_report.Rmd", params = list(
df1_input = iris %>% mutate(ID = row_number()),
df2_input = iris %>% mutate(ID = row_number()),
id_input = "Species",
title_input = "test",
author_input = "Sergio",
context_input = lorem::ipsum()
))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
data.frame()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
dataCompare::run_data_compare_app()
dataCompare::run_data_compare_app()
dataCompare::run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
dataCompare::run_data_compare_app()
library(dplyr)
knitr::include_graphics("../inst/app/www/comparisonReport.PNG")
library(dplyr)
knitr::include_graphics("../inst/app/www/comparisonReport.PNG")
dataCompare::run_data_compare_app()
use_release_issue()
use_release_issue()
rhub::check_for_cran()
?rhubv2
gitcreds::gitcreds_set()
devtools::check_rhub()
rhub::rhub_setup()
usethis::use_git_config(user.name="seewe", user.email="eebouele@gmail.com")
rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check(gh_url = "https://github.com/seewe/dataCompare.git")
rhub::rhub_check(gh_url = "https://github.com/seewe/dataCompare.git")
gitcreds::gitcreds_set("https://github.com/seewe/dataCompare.git")
rhub::rhub_check(gh_url = "https://github.com/seewe/dataCompare.git")
rhub::rhub_check(gh_url = "https://github.com/seewe/dataCompare.git")
usethis::use_news_md()
rhub::rhub_check(gh_url = "https://github.com/seewe/dataCompare.git")
use_news_md(open = rlang::is_interactive())
use_this::use_news_md(open = rlang::is_interactive())
usethis::use_news_md(open = rlang::is_interactive())
usethis::use_news_md(open = rlang::is_interactive())
rhub::rhub_check(gh_url = "https://github.com/seewe/dataCompare.git")
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::check_win_devel()
revdepcheck::revdep_check(num_workers = 4)
Update cran-comments.md
devtools::submit_cran()
use_github_release()
git_repo()
use_github_release()
2+2
use_github_release()
usethis::use_github_release()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
library(dataCompare)
2+2
