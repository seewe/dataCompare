family = 'Ewane Ebouele',
email = 'info@dataforknow.com',
role = c("aut", "cre") ),
repo_url = "https://github.com/seewe/dataCompare",
)
graveler::level_up(name = "test")
devtools::install_github("ghcarlalan/graveler")
graveler::level_up(name = "test")
install.packages("pkgbuild")
install.packages("devtools")
devtools::dev_sitrep()
devtools::dev_sitrep()
2+2
pkgbuild::check_build_tools(debug = TRUE)
2+2
install.packages("devtools")
devtools::load_all()
pkgbuild::check_build_tools(debug = TRUE)
devtools::load_all()
pkgbuild::check_build_tools(debug = TRUE)
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
2+2
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
2+2
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
pkgs <- c(
'devtools',
'pins',
"dplyr",
"lubridate",
"golem",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
usethis::use_package(i)
}
pkgs <- c(
'devtools',
'pins',
"dplyr",
"lubridate",
"golem",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
usethis::use_package(i)
}
rsconnect::writeManifest()
install.packages("shinyexample")
pkgs <- c(
'devtools',
'pins',
"dplyr",
"lubridate",
"golem",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
usethis::use_package(i)
}
rsconnect::writeManifest()
renv::dependencies()
renv::dependencies()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
2+2
pkgs <- c(
'devtools',
'pins',
"dplyr",
"lubridate",
"golem",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
usethis::use_package(i)
}
rsconnect::writeManifest()
renv::dependencies()
rsconnect::writeManifest()
pkgs <- c(
'devtools',
'pins',
"dplyr",
"lubridate",
"golem",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
usethis::use_package(i)
}
pkgs <- c(
"devtools",
"dplyr",
"lubridate",
"golem",
"pins",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
library(i, character.only = TRUE)
}
2+6
pkgs <- c(
"devtools",
"dplyr",
"lubridate",
"golem",
"pins",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
library(i, character.only = TRUE)
}
pkgs <- c(
'devtools',
'pins',
"dplyr",
"lubridate",
"golem",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinydashboardPlus",
"skimr",
"vroom",
"DT",
"data.table",
"arsenal",
"config",
"utils"
)
for (i in pkgs) {
usethis::use_package(i)
}
rsconnect::writeManifest()
rsconnect::writeManifest()
devtools::install_github("ghcarlalan/graveler")
rsconnect::writeManifest()
appDependencies()
rsconnect::appDependencies()
rsconnect::appDependencies()
golem::fill_desc(
pkg_name = "dataCompare",
pkg_title = "Data Comparison",
pkg_description = "A shiny app use to compare two data frame and provide more details on differences.",
pkg_version = '1.0.0',
authors = person(given = 'Sergio',
family = 'Ewane Ebouele',
email = 'info@dataforknow.com',
role = c("aut", "cre") ),
repo_url = "https://github.com/seewe/dataCompare",
)
usethis::use_vignette("dataCompare")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list = ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_data_compare_app()
dataCompare::run_data_compare_app()
add_dockerfile_with_renv(
source_folder = ".",
lockfile = NULL,
output_dir = fs::path(".", "deploy"),
distro = "focal",
from = "rocker/shiny",
as = NULL,
sysreqs = TRUE,
port = 8081,
host = "0.0.0.0",
repos = c(CRAN = "https://cran.rstudio.com/"),
expand = FALSE,
open = TRUE,
document = TRUE,
extra_sysreqs = NULL,
update_tar_gz = TRUE,
dockerfile_cmd = NULL,
)
